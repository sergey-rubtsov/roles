package com.roles.assignment.ui.windows;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.ui.*;

import java.util.Arrays;
import java.util.List;


public class Order extends CustomComponent {

    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private AbsoluteLayout footer;
    @AutoGenerated
    private HorizontalLayout buttonsPanel;
    @AutoGenerated
    private NativeButton cancelButton;
    @AutoGenerated
    private NativeButton saveButton;
    @AutoGenerated
    private NativeButton printButton;
    @AutoGenerated
    private NativeButton editButton;
    @AutoGenerated
    private AbsoluteLayout body;
    @AutoGenerated
    private TabSheet tabs;
    @AutoGenerated
    private VerticalLayout postponement;
    @AutoGenerated
    private Table postponementsTable;
    @AutoGenerated
    private GridLayout postponementInput;
    @AutoGenerated
    private Button buttonOk;
    @AutoGenerated
    private Label todayValue;
    @AutoGenerated
    private Label todayLabel;
    @AutoGenerated
    private TextArea causeValue;
    @AutoGenerated
    private Label causeLabel;
    @AutoGenerated
    private PopupDateField postponDate;
    @AutoGenerated
    private Label postponDateLabel;
    @AutoGenerated
    private VerticalLayout mainReq;
    @AutoGenerated
    private VerticalLayout spacePanel;
    @AutoGenerated
    private HorizontalLayout cause;
    @AutoGenerated
    private TextField causesValue;
    @AutoGenerated
    private AbsoluteLayout causeLabelConainer;
    @AutoGenerated
    private Label causesLabel;
    @AutoGenerated
    private HorizontalLayout quality;
    @AutoGenerated
    private OptionGroup qualitySelector;
    @AutoGenerated
    private GridLayout dates;
    @AutoGenerated
    private PopupDateField deadLineValue;
    @AutoGenerated
    private Label deadLine;
    @AutoGenerated
    private PopupDateField actualDateValue;
    @AutoGenerated
    private Label actualDate;
    @AutoGenerated
    private PopupDateField executionDateValue;
    @AutoGenerated
    private Label executionDate;
    @AutoGenerated
    private HorizontalLayout contentInput;
    @AutoGenerated
    private TextField contentValue;
    @AutoGenerated
    private Label contentLabel;
    @AutoGenerated
    private GridLayout work;
    @AutoGenerated
    private HorizontalLayout workGroupInput;
    @AutoGenerated
    private Button workGroupButton;
    @AutoGenerated
    private TextField workGroupValue;
    @AutoGenerated
    private Label workGroupLabel;
    @AutoGenerated
    private HorizontalLayout workTypeInput;
    @AutoGenerated
    private Button workTypeButton;
    @AutoGenerated
    private TextField workTypeValue;
    @AutoGenerated
    private Label workTypeLabel;
    @AutoGenerated
    private GridLayout req;
    @AutoGenerated
    private HorizontalLayout controllerInput;
    @AutoGenerated
    private Button controllerButton;
    @AutoGenerated
    private TextField controllerValue;
    @AutoGenerated
    private Label controllerLabel;
    @AutoGenerated
    private HorizontalLayout registratorInput;
    @AutoGenerated
    private Button registratorButton;
    @AutoGenerated
    private TextField registratorValue;
    @AutoGenerated
    private Label registratorLabel;
    @AutoGenerated
    private HorizontalLayout authorInput;
    @AutoGenerated
    private Button authorButton;
    @AutoGenerated
    private TextField authorValue;
    @AutoGenerated
    private Label author;
    @AutoGenerated
    private HorizontalLayout title;
    @AutoGenerated
    private HorizontalLayout task;
    @AutoGenerated
    private Button helpTask;
    @AutoGenerated
    private Label titleTask;
    @AutoGenerated
    private Label titleType;

    public Order() {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // TODO add user code here
    }

    @AutoGenerated
    private AbsoluteLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new AbsoluteLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(false);

        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");

        // body
        body = buildBody();
        mainLayout.addComponent(body,
                "top:10.0px;right:10.0px;bottom:70.0px;left:10.0px;");

        // footer
        footer = buildFooter();
        mainLayout.addComponent(footer,
                "right:10.0px;bottom:0.0px;left:10.0px;");

        return mainLayout;
    }

    @AutoGenerated
    private AbsoluteLayout buildBody() {
        // common part: create layout
        body = new AbsoluteLayout();
        body.setImmediate(false);
        body.setWidth("100.0%");
        body.setHeight("100.0%");
        body.setMargin(false);

        // title
        title = buildTitle();
        body.addComponent(title, "top:0.0px;left:0.0px;");

        // tabs
        tabs = buildTabs();
        body.addComponent(tabs, "top:30.0px;left:10.0px;right:10.0px;bottom:0.0px;");

        return body;
    }

    @AutoGenerated
    private HorizontalLayout buildTitle() {
        // common part: create layout
        title = new HorizontalLayout();
        title.setImmediate(false);
        title.setWidth("100.0%");
        title.setHeight("30px");
        title.setMargin(false);

        // titleType
        titleType = new Label();
        titleType.setImmediate(false);
        titleType.setWidth("-1px");
        titleType.setHeight("-1px");
        titleType.setValue("Регистрационный номер: 408");
        title.addComponent(titleType);
        title.setComponentAlignment(titleType, new Alignment(33));

        // task
        task = buildTask();
        title.addComponent(task);
        title.setExpandRatio(task, 1.0f);
        title.setComponentAlignment(task, new Alignment(34));

        return title;
    }

    @AutoGenerated
    private HorizontalLayout buildTask() {
        // common part: create layout
        task = new HorizontalLayout();
        task.setImmediate(false);
        task.setWidth("-1px");
        task.setHeight("-1px");
        task.setMargin(false);

        // titleTask
        titleTask = new Label();
        titleTask.setImmediate(false);
        titleTask.setWidth("-1px");
        titleTask.setHeight("-1px");
        titleTask.setValue("Поручение");
        task.addComponent(titleTask);
        task.setComponentAlignment(titleTask, new Alignment(33));

        // helpTask
        helpTask = new Button();
        helpTask.setCaption("?");
        helpTask.setImmediate(true);
        helpTask.setWidth("-1px");
        helpTask.setHeight("-1px");
        task.addComponent(helpTask);
        task.setComponentAlignment(helpTask, new Alignment(34));

        return task;
    }

    @AutoGenerated
    private TabSheet buildTabs() {
        // common part: create layout
        tabs = new TabSheet();
        tabs.setImmediate(true);
        tabs.setWidth("100.0%");
        tabs.setHeight("100.0%");

        // mainReq
        mainReq = buildMainReq();
        tabs.addTab(mainReq, "Основные реквизиты", null);

        // postponement
        postponement = buildPostponement();
        tabs.addTab(postponement, "Перенос сроков", null);

        return tabs;
    }

    @AutoGenerated
    private VerticalLayout buildMainReq() {
        // common part: create layout
        mainReq = new VerticalLayout();
        mainReq.setImmediate(false);
        mainReq.setWidth("100.0%");
        mainReq.setHeight("-1px");
        mainReq.setMargin(true);
        mainReq.setSpacing(true);

        // req
        req = buildReq();
        mainReq.addComponent(req);

        // work
        work = buildWork();
        mainReq.addComponent(work);

        // spacePanel
        spacePanel = buildSpacePanel();
        mainReq.addComponent(spacePanel);

        return mainReq;
    }

    @AutoGenerated
    private GridLayout buildReq() {
        // common part: create layout
        req = new GridLayout();
        req.setStyleName("req");
        req.setMargin(true, false, true, false);
        req.setImmediate(false);
        req.setWidth("-1px");
        req.setHeight("-1px");
        req.setSpacing(true);
        req.setColumns(2);
        req.setRows(4);

        // author
        author = new Label();
        author.setImmediate(false);
        author.setWidth("80px");
        author.setHeight("-1px");
        author.setValue("Автор:");
        req.addComponent(author, 0, 0);
        req.setComponentAlignment(author, new Alignment(33));

        // authorInput
        authorInput = buildAuthorInput();
        req.addComponent(authorInput, 1, 0);
        req.setComponentAlignment(authorInput, new Alignment(33));

        // registratorLabel
        registratorLabel = new Label();
        registratorLabel.setImmediate(false);
        registratorLabel.setWidth("80px");
        registratorLabel.setHeight("-1px");
        registratorLabel.setValue("Регистратор:");
        req.addComponent(registratorLabel, 0, 1);
        req.setComponentAlignment(registratorLabel, new Alignment(33));

        // registratorInput
        registratorInput = buildRegistratorInput();
        req.addComponent(registratorInput, 1, 1);
        req.setComponentAlignment(registratorInput, new Alignment(33));

        // controllerLabel
        controllerLabel = new Label();
        controllerLabel.setImmediate(false);
        controllerLabel.setWidth("80px");
        controllerLabel.setHeight("-1px");
        controllerLabel.setValue("Контроллер:");
        req.addComponent(controllerLabel, 0, 2);
        req.setComponentAlignment(controllerLabel, new Alignment(33));

        // controllerInput
        controllerInput = buildControllerInput();
        req.addComponent(controllerInput, 1, 2);
        req.setComponentAlignment(controllerInput, new Alignment(33));

        return req;
    }

    @AutoGenerated
    private HorizontalLayout buildAuthorInput() {
        // common part: create layout
        authorInput = new HorizontalLayout();
        authorInput.setImmediate(false);
        authorInput.setWidth("100.0%");
        authorInput.setHeight("-1px");
        authorInput.setMargin(false);

        // authorValue
        authorValue = new TextField();
        authorValue.setImmediate(false);
        authorValue.setWidth("27.0em");
        authorValue.setHeight("-1px");
        authorValue.setSecret(false);
        authorInput.addComponent(authorValue);

        // authorButton
        authorButton = new Button();
        authorButton.setCaption("+");
        authorButton.setImmediate(true);
        authorButton.setWidth("-1px");
        authorButton.setHeight("-1px");
        authorInput.addComponent(authorButton);
        authorInput.setExpandRatio(authorButton, 1.0f);

        return authorInput;
    }

    @AutoGenerated
    private HorizontalLayout buildRegistratorInput() {
        // common part: create layout
        registratorInput = new HorizontalLayout();
        registratorInput.setImmediate(false);
        registratorInput.setWidth("-1px");
        registratorInput.setHeight("-1px");
        registratorInput.setMargin(false);

        // registratorValue
        registratorValue = new TextField();
        registratorValue.setImmediate(false);
        registratorValue.setWidth("27.0em");
        registratorValue.setHeight("-1px");
        registratorValue.setSecret(false);
        registratorInput.addComponent(registratorValue);

        // registratorButton
        registratorButton = new Button();
        registratorButton.setCaption("+");
        registratorButton.setImmediate(true);
        registratorButton.setWidth("-1px");
        registratorButton.setHeight("-1px");
        registratorInput.addComponent(registratorButton);

        return registratorInput;
    }

    @AutoGenerated
    private HorizontalLayout buildControllerInput() {
        // common part: create layout
        controllerInput = new HorizontalLayout();
        controllerInput.setImmediate(false);
        controllerInput.setWidth("-1px");
        controllerInput.setHeight("-1px");
        controllerInput.setMargin(false);

        // controllerValue
        controllerValue = new TextField();
        controllerValue.setImmediate(false);
        controllerValue.setWidth("27.0em");
        controllerValue.setHeight("-1px");
        controllerValue.setSecret(false);
        controllerInput.addComponent(controllerValue);

        // controllerButton
        controllerButton = new Button();
        controllerButton.setCaption("+");
        controllerButton.setImmediate(true);
        controllerButton.setWidth("-1px");
        controllerButton.setHeight("-1px");
        controllerInput.addComponent(controllerButton);

        return controllerInput;
    }

    @AutoGenerated
    private GridLayout buildWork() {
        // common part: create layout
        work = new GridLayout();
        work.setStyleName("work");
        work.setMargin(true, false, true, false);
        work.setImmediate(false);
        work.setWidth("-1px");
        work.setHeight("-1px");
        work.setSpacing(true);
        work.setColumns(2);
        work.setRows(2);

        // workTypeLabel
        workTypeLabel = new Label();
        workTypeLabel.setImmediate(false);
        workTypeLabel.setWidth("80px");
        workTypeLabel.setHeight("-1px");
        workTypeLabel.setValue("Вид работ:");
        work.addComponent(workTypeLabel, 0, 0);
        work.setComponentAlignment(workTypeLabel, new Alignment(33));

        // workTypeInput
        workTypeInput = buildWorkTypeInput();
        work.addComponent(workTypeInput, 1, 0);
        work.setComponentAlignment(workTypeInput, new Alignment(33));

        // workGroupLabel
        workGroupLabel = new Label();
        workGroupLabel.setImmediate(false);
        workGroupLabel.setWidth("80px");
        workGroupLabel.setHeight("-1px");
        workGroupLabel.setValue("Группа работ:");
        work.addComponent(workGroupLabel, 0, 1);
        work.setComponentAlignment(workGroupLabel, new Alignment(33));

        // workGroupInput
        workGroupInput = buildWorkGroupInput();
        work.addComponent(workGroupInput, 1, 1);
        work.setComponentAlignment(workGroupInput, new Alignment(33));

        return work;
    }

    @AutoGenerated
    private HorizontalLayout buildWorkTypeInput() {
        // common part: create layout
        workTypeInput = new HorizontalLayout();
        workTypeInput.setImmediate(false);
        workTypeInput.setWidth("-1px");
        workTypeInput.setHeight("-1px");
        workTypeInput.setMargin(false);

        // workTypeValue
        workTypeValue = new TextField();
        workTypeValue.setImmediate(false);
        workTypeValue.setWidth("27.0em");
        workTypeValue.setHeight("-1px");
        workTypeValue.setSecret(false);
        workTypeInput.addComponent(workTypeValue);

        // workTypeButton
        workTypeButton = new Button();
        workTypeButton.setCaption("+");
        workTypeButton.setImmediate(true);
        workTypeButton.setWidth("-1px");
        workTypeButton.setHeight("-1px");
        workTypeInput.addComponent(workTypeButton);

        return workTypeInput;
    }

    @AutoGenerated
    private HorizontalLayout buildWorkGroupInput() {
        // common part: create layout
        workGroupInput = new HorizontalLayout();
        workGroupInput.setImmediate(false);
        workGroupInput.setWidth("-1px");
        workGroupInput.setHeight("-1px");
        workGroupInput.setMargin(false);

        // workGroupValue
        workGroupValue = new TextField();
        workGroupValue.setImmediate(false);
        workGroupValue.setWidth("27.0em");
        workGroupValue.setHeight("-1px");
        workGroupValue.setSecret(false);
        workGroupInput.addComponent(workGroupValue);

        // workGroupButton
        workGroupButton = new Button();
        workGroupButton.setCaption("+");
        workGroupButton.setImmediate(true);
        workGroupButton.setWidth("-1px");
        workGroupButton.setHeight("-1px");
        workGroupInput.addComponent(workGroupButton);

        return workGroupInput;
    }

    @AutoGenerated
    private VerticalLayout buildSpacePanel() {
        // common part: create layout
        spacePanel = new VerticalLayout();
        spacePanel.setImmediate(false);
        spacePanel.setWidth("100.0%");
        spacePanel.setHeight("-1px");
        spacePanel.setMargin(false);
        spacePanel.setSpacing(true);

        // contentInput
        contentInput = buildContentInput();
        spacePanel.addComponent(contentInput);

        // dates
        dates = buildDates();
        spacePanel.addComponent(dates);
        spacePanel.setExpandRatio(dates, 1.0f);
        spacePanel.setComponentAlignment(dates, new Alignment(33));

        // quality
        quality = buildQuality();
        spacePanel.addComponent(quality);

        // cause
        cause = buildCause();
        spacePanel.addComponent(cause);

        return spacePanel;
    }

    @AutoGenerated
    private HorizontalLayout buildContentInput() {
        // common part: create layout
        contentInput = new HorizontalLayout();
        contentInput.setStyleName("contentInput");
        contentInput.setMargin(true, false, true, false);
        contentInput.setImmediate(false);
        contentInput.setWidth("100.0%");
        contentInput.setHeight("-1px");
        contentInput.setSpacing(true);

        // contentLabel
        contentLabel = new Label();
        contentLabel.setImmediate(false);
        contentLabel.setWidth("80px");
        contentLabel.setHeight("-1px");
        contentLabel.setValue("Содержание:");
        contentInput.addComponent(contentLabel);
        contentInput.setComponentAlignment(contentLabel, new Alignment(33));

        // contentValue
        contentValue = new TextField();
        contentValue.setImmediate(false);
        contentValue.setWidth("100.0%");
        contentValue.setHeight("60px");
        contentValue.setSecret(false);
        contentInput.addComponent(contentValue);
        contentInput.setExpandRatio(contentValue, 1.0f);
        contentInput.setComponentAlignment(contentValue, new Alignment(33));

        return contentInput;
    }

    @AutoGenerated
    private GridLayout buildDates() {
        // common part: create layout
        dates = new GridLayout();
        dates.setStyleName("dates");
        dates.setMargin(true, false, true, false);
        dates.setImmediate(false);
        dates.setWidth("-1px");
        dates.setHeight("-1px");
        dates.setSpacing(true);
        dates.setColumns(2);
        dates.setRows(3);

        // executionDate
        executionDate = new Label();
        executionDate.setImmediate(false);
        executionDate.setWidth("120px");
        executionDate.setHeight("-1px");
        executionDate.setValue("Плановая дата исполнения:");
        dates.addComponent(executionDate, 0, 0);
        dates.setComponentAlignment(executionDate, new Alignment(33));

        // executionDateValue
        executionDateValue = new PopupDateField();
        executionDateValue.setImmediate(false);
        executionDateValue.setWidth("-1px");
        executionDateValue.setHeight("-1px");
        executionDateValue.setInvalidAllowed(false);
        dates.addComponent(executionDateValue, 1, 0);
        dates.setComponentAlignment(executionDateValue, new Alignment(33));

        // actualDate
        actualDate = new Label();
        actualDate.setImmediate(false);
        actualDate.setWidth("120px");
        actualDate.setHeight("-1px");
        actualDate.setValue("Фактическая дата исполнения:");
        dates.addComponent(actualDate, 0, 1);
        dates.setComponentAlignment(actualDate, new Alignment(33));

        // actualDateValue
        actualDateValue = new PopupDateField();
        actualDateValue.setImmediate(false);
        actualDateValue.setWidth("-1px");
        actualDateValue.setHeight("-1px");
        actualDateValue.setInvalidAllowed(false);
        dates.addComponent(actualDateValue, 1, 1);
        dates.setComponentAlignment(actualDateValue, new Alignment(33));

        // deadLine
        deadLine = new Label();
        deadLine.setImmediate(false);
        deadLine.setWidth("120px");
        deadLine.setHeight("-1px");
        deadLine.setValue("Контрольный срок:");
        dates.addComponent(deadLine, 0, 2);
        dates.setComponentAlignment(deadLine, new Alignment(33));

        // deadLineValue
        deadLineValue = new PopupDateField();
        deadLineValue.setImmediate(false);
        deadLineValue.setWidth("-1px");
        deadLineValue.setHeight("-1px");
        deadLineValue.setInvalidAllowed(false);
        dates.addComponent(deadLineValue, 1, 2);
        dates.setComponentAlignment(deadLineValue, new Alignment(33));

        return dates;
    }

    private HorizontalLayout buildQuality() {

        final List<String> qualityValues = Arrays.asList(new String[]{"качественно", "некачественно"});

        // common part: create layout
        quality = new HorizontalLayout();
        quality.setImmediate(false);
        quality.setWidth("100.0%");
        quality.setHeight("65px");
        quality.addStyleName("quality");
        quality.setMargin(true, false, false, false);

        // qualitySelector
        qualitySelector = new OptionGroup("Качество выполнения:", qualityValues);
        qualitySelector.addStyleName("horizontal");
        qualitySelector.setNullSelectionAllowed(true);
        qualitySelector.setImmediate(false);
        qualitySelector.setWidth("-1px");
        qualitySelector.setHeight("65px");
        quality.addComponent(qualitySelector);

        return quality;
    }

    @AutoGenerated
    private HorizontalLayout buildCause() {
        // common part: create layout
        cause = new HorizontalLayout();
        cause.setImmediate(false);
        cause.setWidth("100.0%");
        cause.setHeight("-1px");
        cause.setMargin(false);
        cause.setSpacing(true);

        // causeLabelConainer
        causeLabelConainer = buildCauseLabelConainer();
        cause.addComponent(causeLabelConainer);
        cause.setComponentAlignment(causeLabelConainer, new Alignment(48));

        // causesValue
        causesValue = new TextField();
        causesValue.setImmediate(false);
        causesValue.setWidth("100.0%");
        causesValue.setHeight("60px");
        causesValue.setSecret(false);
        cause.addComponent(causesValue);
        cause.setExpandRatio(causesValue, 1.0f);
        cause.setComponentAlignment(causesValue, new Alignment(33));

        return cause;
    }

    @AutoGenerated
    private AbsoluteLayout buildCauseLabelConainer() {
        // common part: create layout
        causeLabelConainer = new AbsoluteLayout();
        causeLabelConainer.setImmediate(false);
        causeLabelConainer.setWidth("120px");
        causeLabelConainer.setHeight("100.0%");
        causeLabelConainer.setMargin(false);

        // causesLabel
        causesLabel = new Label();
        causesLabel.setImmediate(false);
        causesLabel.setWidth("100.0%");
        causesLabel.setHeight("-1px");
        causesLabel.setValue("Причина признания некачественным:");
        causeLabelConainer.addComponent(causesLabel,
                "top:20.0%;right:0.0px;left:0.0px;");

        return causeLabelConainer;
    }

    @AutoGenerated
    private VerticalLayout buildPostponement() {
        // common part: create layout
        postponement = new VerticalLayout();
        postponement.setImmediate(false);
        postponement.setWidth("100.0%");
        postponement.setHeight("-1px");
        postponement.setMargin(true);
        postponement.setSpacing(true);

        // postponementInput
        postponementInput = buildPostponementInput();
        postponement.addComponent(postponementInput);

        // postponementsTable
        postponementsTable = buildTable();
        postponementsTable.setImmediate(false);
        postponementsTable.setWidth("100.0%");
        postponementsTable.setHeight("-1px");
        postponement.addComponent(postponementsTable);

        return postponement;
    }

    private Table buildTable() {
        final String[] columns = new String[] { "Перенос срока на (дату)", "Причина переноса", "Дата переноса" };
        Table table = new Table();
        table.setImmediate(true);
        table.setContainerDataSource(getContainer());
        table.setColumnHeaders(columns);
        return table;
    }

    public static IndexedContainer getContainer() {
        IndexedContainer c = new IndexedContainer();
        fillContainer(c);
        return c;
    }

    private static void fillContainer(IndexedContainer container) {
        final String[] array = new String[] { "20.12.2013", "Причина не известна", "21.12.2014", "Сгорел завод" };
        final Object date = "date";
        final Object cause = "cause";
        final Object today = "today";
        container.addContainerProperty(date, String.class,
                null);
        container.addContainerProperty(cause, String.class,
                null);
        container.addContainerProperty(today, String.class,
                null);
        for (int i = 0; i < array.length; i++) {
            String dateStr = array[i++];
            String causeStr = array[i];
            Item item = container.addItem(causeStr);
            item.getItemProperty(date).setValue(dateStr);
            item.getItemProperty(cause).setValue(causeStr);
            item.getItemProperty(today).setValue("20.03.2013");
        }
    }

    @AutoGenerated
    private GridLayout buildPostponementInput() {
        // common part: create layout
        postponementInput = new GridLayout();
        postponementInput.setImmediate(false);
        postponementInput.setWidth("100.0%");
        postponementInput.setHeight("-1px");
        postponementInput.setSpacing(true);
        postponementInput.setColumns(2);
        postponementInput.setRows(4);

        // postponDateLabel
        postponDateLabel = new Label();
        postponDateLabel.setImmediate(false);
        postponDateLabel.setWidth("160px");
        postponDateLabel.setHeight("-1px");
        postponDateLabel.setValue("Перенос срока на (дату):");
        postponementInput.addComponent(postponDateLabel, 0, 0);
        postponementInput.setComponentAlignment(postponDateLabel,
                new Alignment(33));

        // postponDate
        postponDate = new PopupDateField();
        postponDate.setImmediate(false);
        postponDate.setWidth("-1px");
        postponDate.setHeight("-1px");
        postponDate.setInvalidAllowed(false);
        postponementInput.addComponent(postponDate, 1, 0);
        postponementInput.setComponentAlignment(postponDate, new Alignment(33));

        // causeLabel
        causeLabel = new Label();
        causeLabel.setImmediate(false);
        causeLabel.setWidth("160px");
        causeLabel.setHeight("-1px");
        causeLabel.setValue("Причина переноса сроков:");
        postponementInput.addComponent(causeLabel, 0, 1);
        postponementInput.setComponentAlignment(causeLabel, new Alignment(33));

        // causeValue
        causeValue = new TextArea();
        causeValue.setImmediate(false);
        causeValue.setWidth("27.0em");
        causeValue.setHeight("40px");
        postponementInput.addComponent(causeValue, 1, 1);
        postponementInput.setComponentAlignment(causeValue, new Alignment(33));

        // todayLabel
        todayLabel = new Label();
        todayLabel.setImmediate(false);
        todayLabel.setWidth("160px");
        todayLabel.setHeight("-1px");
        todayLabel.setValue("Дата переноса сроков:");
        postponementInput.addComponent(todayLabel, 0, 2);
        postponementInput.setComponentAlignment(todayLabel, new Alignment(33));

        // todayValue
        todayValue = new Label();
        todayValue.setImmediate(false);
        todayValue.setWidth("-1px");
        todayValue.setHeight("-1px");
        todayValue.setValue("20.03.2013");
        postponementInput.addComponent(todayValue, 1, 2);
        postponementInput.setComponentAlignment(todayValue, new Alignment(33));

        // buttonOk
        buttonOk = new Button();
        buttonOk.setCaption("Сделать перенос");
        buttonOk.setImmediate(true);
        buttonOk.setWidth("-1px");
        buttonOk.setHeight("-1px");
        postponementInput.addComponent(buttonOk, 1, 3);
        postponementInput.setComponentAlignment(buttonOk, new Alignment(33));

        return postponementInput;
    }

    @AutoGenerated
    private AbsoluteLayout buildFooter() {
        // common part: create layout
        footer = new AbsoluteLayout();
        footer.setImmediate(false);
        footer.setWidth("100.0%");
        footer.setHeight("70px");
        footer.setMargin(false);

        // buttonsPanel
        buttonsPanel = buildButtonsPanel();
        footer.addComponent(buttonsPanel, "top:0.0px;right:0.0px;bottom:0.0px;");

        return footer;
    }

    @AutoGenerated
    private HorizontalLayout buildButtonsPanel() {
        // common part: create layout
        buttonsPanel = new HorizontalLayout();
        buttonsPanel.setImmediate(false);
        buttonsPanel.setWidth("-1px");
        buttonsPanel.setHeight("100.0%");
        buttonsPanel.setMargin(true);
        buttonsPanel.setSpacing(true);

        // editButton
        editButton = new NativeButton();
        editButton.setCaption("В работу");
        editButton.setImmediate(true);
        editButton.setWidth("120px");
        editButton.setHeight("35px");
        buttonsPanel.addComponent(editButton);
        buttonsPanel.setComponentAlignment(editButton, new Alignment(34));

        // printButton
        printButton = new NativeButton();
        printButton.setCaption("Печать");
        printButton.setImmediate(true);
        printButton.setWidth("120px");
        printButton.setHeight("35px");
        buttonsPanel.addComponent(printButton);
        buttonsPanel.setComponentAlignment(printButton, new Alignment(34));

        // saveButton
        saveButton = new NativeButton();
        saveButton.setCaption("Сохранить");
        saveButton.setImmediate(true);
        saveButton.setWidth("120px");
        saveButton.setHeight("35px");
        buttonsPanel.addComponent(saveButton);
        buttonsPanel.setComponentAlignment(saveButton, new Alignment(34));

        // cancelButton
        cancelButton = new NativeButton();
        cancelButton.setCaption("Отмена");
        cancelButton.setImmediate(true);
        cancelButton.setWidth("120px");
        cancelButton.setHeight("35px");
        buttonsPanel.addComponent(cancelButton);
        buttonsPanel.setComponentAlignment(cancelButton, new Alignment(34));

        return buttonsPanel;
    }
}
